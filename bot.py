import os
import asyncio
import threading
from http.server import SimpleHTTPRequestHandler, HTTPServer
from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from pymongo import MongoClient
from rapidfuzz import fuzz

# ‡¶ì‡ßü‡ßá‡¶¨ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ (health check) ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã, Koyeb ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®
def start_web():
    port = int(os.environ.get("PORT", 8000))
    server = HTTPServer(("0.0.0.0", port), SimpleHTTPRequestHandler)
    print(f"Web server running on port {port}")
    server.serve_forever()

threading.Thread(target=start_web, daemon=True).start()

# Environment variables
API_ID = int(os.environ.get("API_ID"))
API_HASH = os.environ.get("API_HASH")
SESSION_STRING = os.environ.get("SESSION_STRING")  # UserSession string
MONGO_URI = os.environ.get("MONGO_URI")
CHANNEL_ID = int(os.environ.get("CHANNEL_ID"))
ADMINS = [int(x) for x in os.environ.get("ADMINS", "").split() if x.strip().isdigit()]

# MongoDB setup
mongo_client = MongoClient(MONGO_URI)
db = mongo_client["movie_bot"]
collection = db["movies"]
user_collection = db["users"]
not_found_collection = db["not_found"]

# Pyrogram client using UserSession
app = Client("movie_bot_session", api_id=API_ID, api_hash=API_HASH, session_string=SESSION_STRING)

# START command - ‡¶∏‡¶ï‡¶≤ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
@app.on_message(filters.private & filters.command("start"))
async def start_handler(client, message):
    user_collection.update_one({"user_id": message.from_user.id}, {"$set": {"user_id": message.from_user.id}}, upsert=True)
    await message.reply_text(
        "‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã! ‡¶Ü‡¶Æ‡¶ø ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶¨‡¶ü!\n\n‡¶Æ‡ßÅ‡¶≠‡¶ø‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßã, ‡¶Ü‡¶Æ‡¶ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶è‡¶®‡ßá ‡¶¶‡¶ø‡¶¨!",
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("‚ûï Add to Group", url=f"https://t.me/{(await client.get_me()).username}?startgroup=true"),
                    InlineKeyboardButton("üì¢ Update Channel", url="https://t.me/CTGMovieOfficial")
                ]
            ]
        )
    )

# HELP command - ‡¶∏‡¶ï‡¶≤ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
@app.on_message(filters.private & filters.command("help"))
async def help_handler(client, message):
    await message.reply_text(
        "**‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ:**\n\n‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶Æ‡ßÅ‡¶≠‡¶ø‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®, ‡¶Ü‡¶Æ‡¶ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¶‡ßá‡¶¨‡ßã!\n\n‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ø‡¶¶‡¶ø ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶®‡¶æ ‡¶™‡¶æ‡¶®, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßÇ‡¶™ ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶∏‡¶æ‡¶ú‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá‡•§"
    )

# STATS command - ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶è‡¶°‡¶Æ‡¶ø‡¶®‡¶¶‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
@app.on_message(filters.private & filters.command("stats") & filters.user(ADMINS))
async def stats_handler(client, message):
    total_movies = collection.count_documents({})
    total_users = user_collection.count_documents({})
    await message.reply_text(f"‡¶Æ‡ßã‡¶ü ‡¶Æ‡ßÅ‡¶≠‡¶ø: {total_movies}\n‡¶Æ‡ßã‡¶ü ‡¶á‡¶â‡¶ú‡¶æ‡¶∞: {total_users}")

# DELETE ALL command - ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶è‡¶°‡¶Æ‡¶ø‡¶®‡¶¶‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
@app.on_message(filters.private & filters.command("delete_all") & filters.user(ADMINS))
async def delete_all_handler(client, message):
    collection.delete_many({})
    await message.reply_text("‡¶∏‡¶¨ ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶ú ‡¶•‡ßá‡¶ï‡ßá ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")

# BROADCAST command - ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶è‡¶°‡¶Æ‡¶ø‡¶®‡¶¶‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
@app.on_message(filters.private & filters.command("broadcast") & filters.user(ADMINS))
async def broadcast_handler(client, message):
    if not message.reply_to_message:
        return await message.reply_text("‡¶¨‡ßç‡¶∞‡¶°‡¶ï‡¶æ‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡ßá ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶¶‡¶ø‡¶®‡•§")

    users = user_collection.find()
    success = 0
    failed = 0

    for user in users:
        try:
            await message.reply_to_message.copy(chat_id=user["user_id"])
            success += 1
        except Exception:
            failed += 1

    await message.reply_text(f"‚úÖ ‡¶∏‡¶´‡¶≤: {success}\n‚ùå ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: {failed}")

# ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö - ‡¶∏‡¶ï‡¶≤ ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶≠‡ßá‡¶ü ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
@app.on_message(filters.private & filters.text & ~filters.command(["start", "help", "stats", "delete_all", "broadcast"]))
async def search_movie(client, message):
    query = message.text.strip().lower()
    movies = list(collection.find())
    best_match = None
    best_score = 0

    for movie in movies:
        title = movie.get("text", "").lower()
        score = fuzz.partial_ratio(query, title)
        if score > best_score:
            best_score = score
            best_match = movie

    if best_score >= 90 and best_match:
        try:
            sent = await client.forward_messages(
                chat_id=message.chat.id,
                from_chat_id=CHANNEL_ID,
                message_ids=best_match["message_id"]
            )
            await asyncio.sleep(300)  # ‡ß´ ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü ‡¶™‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü
            await sent.delete()
        except Exception as e:
            await message.reply_text(f"‡¶´‡¶∞‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")
    else:
        suggestions = sorted(movies, key=lambda m: fuzz.partial_ratio(query, m.get("text", "").lower()), reverse=True)[:5]
        buttons = [
            [InlineKeyboardButton(movie["text"][:30], callback_data=f"id_{movie['message_id']}")]
            for movie in suggestions if fuzz.partial_ratio(query, movie.get("text", "").lower()) > 50
        ]

        if buttons:
            await message.reply("‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶ï‡ßã‡¶®‡¶ü‡¶ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡¶õ‡ßá‡¶®?", reply_markup=InlineKeyboardMarkup(buttons))
        else:
            not_found_collection.update_one(
                {"query": query},
                {"$addToSet": {"users": message.from_user.id}, "$set": {"query": query}},
                upsert=True
            )
            for admin_id in ADMINS:
                try:
                    await client.send_message(
                        chat_id=admin_id,
                        text=f"‚ö†Ô∏è ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ @{message.from_user.username or message.from_user.id} '{query}' ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡ßü‡¶®‡¶ø‡•§"
                    )
                except Exception as e:
                    print(f"Failed to notify admin {admin_id}: {e}")

            await message.reply(f"‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, '{query}' ‡¶®‡¶æ‡¶Æ‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶á‡¶®‡¶ø!")

# Callback query for suggestions
@app.on_callback_query(filters.regex("^id_"))
async def suggestion_click(client, callback_query: CallbackQuery):
    message_id = int(callback_query.data.replace("id_", ""))
    result = collection.find_one({"message_id": message_id})

    if result:
        try:
            sent = await client.forward_messages(
                chat_id=callback_query.message.chat.id,
                from_chat_id=CHANNEL_ID,
                message_ids=message_id
            )
            await callback_query.answer()
            await asyncio.sleep(300)
            await sent.delete()
        except Exception as e:
            await callback_query.message.reply_text(f"‡¶´‡¶∞‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")
    else:
        await callback_query.message.reply_text("‡¶Æ‡ßÅ‡¶≠‡¶ø‡¶ü‡¶ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø!")

# Channel ‡¶•‡ßá‡¶ï‡ßá ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£
@app.on_message(filters.channel)
async def save_channel_messages(client, message):
    if message.chat.id == CHANNEL_ID:
        text = message.text or message.caption
        if text:
            collection.update_one(
                {"message_id": message.id},
                {"$set": {"text": text, "message_id": message.id}},
                upsert=True
            )
            print(f"Saved: {text[:40]}...")

            # ‡¶®‡¶§‡ßÅ‡¶® ‡¶Æ‡ßÅ‡¶≠‡¶ø‡¶∞ ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶¶‡ßá‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã (‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶õ‡¶æ‡ßú‡¶æ ‡¶∏‡¶¨ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞)
            users = user_collection.find()
            for user in users:
                try:
                    await client.send_message(
                        chat_id=user["user_id"],
                        text=(
                            "‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã ‡¶ó‡¶æ‡¶á‡¶∏!\n\n"
                            f"‡¶®‡¶§‡ßÅ‡¶® ‡¶Æ‡ßÅ‡¶≠‡¶ø **'{text[:35]}'** ‡¶è‡¶ñ‡¶® ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!\n"
                            "‡¶Ü‡¶™‡¶®‡¶ø ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶è‡¶ñ‡¶®‡¶á ‡¶®‡¶æ‡¶Æ‡¶ü‡¶ø ‡¶≤‡¶ø‡¶ñ‡ßá ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶ñ‡ßá ‡¶®‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§"
                        )
                    )
                except Exception as e:
                    print(f"Couldn't notify user {user['user_id']}: {e}")

# ‡¶è‡¶°‡¶Æ‡¶ø‡¶®‡¶¶‡ßá‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶¶‡ßá‡¶∞ ‡¶®‡¶ü ‡¶´‡¶æ‡¶â‡¶®‡ßç‡¶° ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã‡¶∞ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
@app.on_message(filters.private & filters.command("check_requests") & filters.user(ADMINS))
async def check_requests(client, message):
    requests = not_found_collection.find()
    response = "‡¶è‡¶á ‡¶Æ‡ßÅ‡¶≠‡¶ø‡¶ó‡ßÅ‡¶≤‡ßã ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá:\n\n"
    for request in requests:
        users = ", ".join([str(user) for user in request["users"]])
        response += f"‡¶Æ‡ßÅ‡¶≠‡¶ø: {request['query']}, ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶∞‡¶æ: {users}\n"
    await message.reply_text(response)

# ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü (‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶Ø‡ßá‡¶ï‡ßã‡¶® ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
@app.on_message(filters.group & filters.text & ~filters.command(["start", "help", "stats", "delete_all", "broadcast"]))
async def group_search_movie(client, message):
    query = message.text.strip().lower()
    movies = list(collection.find())
    best_match = None
    best_score = 0

    for movie in movies:
        title = movie.get("text", "").lower()
        score = fuzz.partial_ratio(query, title)
        if score > best_score:
            best_score = score
            best_match = movie

    if best_score >= 70 and best_match:
        try:
            sent = await client.forward_messages(
                chat_id=message.chat.id,
                from_chat_id=CHANNEL_ID,
                message_ids=best_match["message_id"]
            )
            await asyncio.sleep(300)
            await sent.delete()
        except Exception as e:
            await message.reply_text(f"‡¶´‡¶∞‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")
    else:
        suggestions = sorted(movies, key=lambda m: fuzz.partial_ratio(query, m.get("text", "").lower()), reverse=True)[:5]
        buttons = [
            [InlineKeyboardButton(movie["text"][:30], callback_data=f"id_{movie['message_id']}")]
            for movie in suggestions if fuzz.partial_ratio(query, movie.get("text", "").lower()) > 50
        ]

        if buttons:
            await message.reply("‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶ï‡ßã‡¶®‡¶ü‡¶ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡¶õ‡ßá‡¶®?", reply_markup=InlineKeyboardMarkup(buttons))
        else:
            not_found_collection.update_one(
                {"query": query},
                {"$addToSet": {"users": message.from_user.id}, "$set": {"query": query}},
                upsert=True
            )
            for admin_id in ADMINS:
                try:
                    await client.send_message(
                        chat_id=admin_id,
                        text=f"‚ö†Ô∏è ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ @{message.from_user.username or message.from_user.id} '{query}' ‡¶Æ‡ßÅ‡¶≠‡¶ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡ßü‡¶®‡¶ø‡•§"
                    )
                except Exception as e:
                    print(f"Failed to notify admin {admin_id}: {e}")

            await message.reply(f"‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, '{query}' ‡¶®‡¶æ‡¶Æ‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶á‡¶®‡¶ø!")

if __name__ == "__main__":
    print("Starting Bot...")
    app.run()
